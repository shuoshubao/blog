/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@icon-leave-name: 'icon-leave';
@icon-leave-x: 0px;
@icon-leave-y: 0px;
@icon-leave-offset-x: 0px;
@icon-leave-offset-y: 0px;
@icon-leave-width: 32px;
@icon-leave-height: 32px;
@icon-leave-total-width: 62px;
@icon-leave-total-height: 52px;
@icon-leave-image: 'sprite.png';
@icon-leave: 0px 0px 0px 0px 32px 32px 62px 52px 'sprite.png' 'icon-leave';
@icon-money-name: 'icon-money';
@icon-money-x: 0px;
@icon-money-y: 32px;
@icon-money-offset-x: 0px;
@icon-money-offset-y: -32px;
@icon-money-width: 20px;
@icon-money-height: 20px;
@icon-money-total-width: 62px;
@icon-money-total-height: 52px;
@icon-money-image: 'sprite.png';
@icon-money: 0px 32px 0px -32px 20px 20px 62px 52px 'sprite.png' 'icon-money';
@icon-pic-name: 'icon-pic';
@icon-pic-x: 32px;
@icon-pic-y: 0px;
@icon-pic-offset-x: -32px;
@icon-pic-offset-y: 0px;
@icon-pic-width: 30px;
@icon-pic-height: 30px;
@icon-pic-total-width: 62px;
@icon-pic-total-height: 52px;
@icon-pic-image: 'sprite.png';
@icon-pic: 32px 0px -32px 0px 30px 30px 62px 52px 'sprite.png' 'icon-pic';
@icon-step-name: 'icon-step';
@icon-step-x: 20px;
@icon-step-y: 32px;
@icon-step-offset-x: -20px;
@icon-step-offset-y: -32px;
@icon-step-width: 16px;
@icon-step-height: 16px;
@icon-step-total-width: 62px;
@icon-step-total-height: 52px;
@icon-step-image: 'sprite.png';
@icon-step: 20px 32px -20px -32px 16px 16px 62px 52px 'sprite.png' 'icon-step';
@spritesheet-width: 62px;
@spritesheet-height: 52px;
@spritesheet-image: 'sprite.png';
@spritesheet-sprites: @icon-leave @icon-money @icon-pic @icon-step;
@spritesheet: 62px 52px 'sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
